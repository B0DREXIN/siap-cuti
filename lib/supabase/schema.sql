-- =================================================================
-- SIAP CUTI - Supabase Database Schema
-- Version: 1.2
-- Last Updated: [Current Date]
-- Description: Full schema for the SIAP CUTI application.
-- This script is idempotent and can be run on a fresh Supabase project.
-- =================================================================

-- -----------------------------------------------------------------
-- 1. EXTENSIONS (No action needed, enabled by default on Supabase)
-- -----------------------------------------------------------------
-- Ensure the required extensions are enabled in your Supabase project dashboard.
-- `pgaudit`, `pgcrypto`, `pg_graphql`, `pg_stat_statements`, `pgjwt`, `supabase_vault`, `uuid-ossp`


-- -----------------------------------------------------------------
-- 2. TABLES
-- -----------------------------------------------------------------

-- Drop tables in reverse order of creation to handle dependencies
DROP TABLE IF EXISTS public.notifications;
DROP TABLE IF EXISTS public.leave_requests;
DROP TABLE IF EXISTS public.leave_balances;
DROP TABLE IF EXISTS public.profiles;

-- Create `profiles` table to store user data
-- This table is linked to the `auth.users` table
CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    id_pjlp text UNIQUE,
    phone text,
    email text UNIQUE,
    avatar_url text,
    role text DEFAULT 'anggota',
    updated_at timestamp with time zone DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';

-- Create `leave_balances` table to store annual leave data
CREATE TABLE public.leave_balances (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    year integer NOT NULL,
    total_days integer NOT NULL DEFAULT 12,
    used_days integer NOT NULL DEFAULT 0,
    CONSTRAINT leave_balances_user_id_year_key UNIQUE (user_id, year)
);
COMMENT ON TABLE public.leave_balances IS 'Stores the annual leave balance for each user per year.';

-- Create `leave_requests` table to store leave applications
CREATE TABLE public.leave_requests (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    title text NOT NULL,
    reason text,
    start_date date NOT NULL,
    end_date date NOT NULL,
    duration integer NOT NULL,
    status text NOT NULL DEFAULT 'Menunggu',
    attachment_url text,
    is_read_by_user boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.leave_requests IS 'Stores all leave requests from users.';

-- Create `notifications` table for admin alerts
CREATE TABLE public.notifications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    leave_request_id bigint NOT NULL REFERENCES public.leave_requests(id) ON DELETE CASCADE,
    message text NOT NULL,
    is_read boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone DEFAULT now()
);
COMMENT ON TABLE public.notifications IS 'Notifications for admins about new leave requests.';


-- -----------------------------------------------------------------
-- 3. FUNCTIONS & TRIGGERS
-- -----------------------------------------------------------------

-- Drop existing functions and triggers to ensure a clean slate
DROP FUNCTION IF EXISTS public.handle_new_user();
DROP FUNCTION IF EXISTS public.create_leave_balance_if_not_exists();
DROP FUNCTION IF EXISTS public.update_leave_balance_on_approval();
DROP FUNCTION IF EXISTS public.get_user_role();
DROP FUNCTION IF EXISTS public.create_admin_notification_for_new_leave();

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP TRIGGER IF EXISTS trigger_update_leave_balance ON public.leave_requests;
DROP TRIGGER IF EXISTS trigger_check_leave_balance_on_insert ON public.leave_requests;
DROP TRIGGER IF EXISTS trigger_create_admin_notification ON public.leave_requests;

-- Function: handle_new_user()
-- Description: Automatically creates a profile row for a new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, name, id_pjlp, phone, email)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'name',
    NEW.raw_user_meta_data->>'id_pjlp',
    NEW.raw_user_meta_data->>'phone',
    NEW.email
  );
  RETURN NEW;
END;
$$;

-- Trigger: on_auth_user_created
-- Description: Executes `handle_new_user` after a new user is created in `auth.users`.
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user();


-- Function: create_leave_balance_if_not_exists()
-- Description: Checks if a leave balance exists for the user for the current year. If not, creates one.
-- Runs with DEFINER rights to bypass RLS for the INSERT operation.
CREATE OR REPLACE FUNCTION public.create_leave_balance_if_not_exists()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_current_year integer := EXTRACT(YEAR FROM NOW());
BEGIN
  -- Check if a balance record for the current year already exists for this user
  IF NOT EXISTS (
    SELECT 1
    FROM public.leave_balances
    WHERE user_id = NEW.user_id AND year = v_current_year
  ) THEN
    -- If not, create a new balance record for the current year
    INSERT INTO public.leave_balances (user_id, year, total_days, used_days)
    VALUES (NEW.user_id, v_current_year, 12, 0);
  END IF;
  RETURN NEW;
END;
$$;

-- Trigger: trigger_check_leave_balance_on_insert
-- Description: Executes `create_leave_balance_if_not_exists` before a new leave request is inserted.
CREATE TRIGGER trigger_check_leave_balance_on_insert
BEFORE INSERT ON public.leave_requests
FOR EACH ROW
EXECUTE FUNCTION public.create_leave_balance_if_not_exists();


-- Function: update_leave_balance_on_approval()
-- Description: When a leave request status is changed to 'Disetujui', it updates the user's leave balance.
CREATE OR REPLACE FUNCTION public.update_leave_balance_on_approval()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_year integer;
BEGIN
  -- Only run if the status is updated to 'Disetujui'
  IF NEW.status = 'Disetujui' AND OLD.status <> 'Disetujui' THEN
    v_year := EXTRACT(YEAR FROM NEW.start_date);
    
    UPDATE public.leave_balances
    SET used_days = used_days + NEW.duration
    WHERE user_id = NEW.user_id AND year = v_year;
  END IF;
  RETURN NEW;
END;
$$;

-- Trigger: trigger_update_leave_balance
-- Description: Executes `update_leave_balance_on_approval` after a leave request is updated.
CREATE TRIGGER trigger_update_leave_balance
AFTER UPDATE ON public.leave_requests
FOR EACH ROW
EXECUTE FUNCTION public.update_leave_balance_on_approval();


-- Function: get_user_role()
-- Description: A utility function to get the role of the currently authenticated user.
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS TEXT
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN (
    SELECT role FROM public.profiles WHERE id = auth.uid()
  );
END;
$$;


-- Function: create_admin_notification_for_new_leave()
-- Description: Creates a notification for all admin users when a new leave request is submitted.
CREATE OR REPLACE FUNCTION public.create_admin_notification_for_new_leave()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    admin_record RECORD;
    requestor_name TEXT;
BEGIN
    -- Get the name of the user who submitted the request
    SELECT name INTO requestor_name FROM public.profiles WHERE id = NEW.user_id;

    -- Loop through all users with the 'admin' role
    FOR admin_record IN SELECT id FROM public.profiles WHERE role = 'admin' LOOP
        -- Insert a notification for each admin
        INSERT INTO public.notifications (user_id, leave_request_id, message)
        VALUES (
            admin_record.id,
            NEW.id,
            requestor_name || ' telah mengajukan cuti baru: ' || NEW.title
        );
    END LOOP;
    RETURN NEW;
END;
$$;

-- Trigger: trigger_create_admin_notification
-- Description: Executes `create_admin_notification_for_new_leave` after a new leave request is inserted.
CREATE TRIGGER trigger_create_admin_notification
AFTER INSERT ON public.leave_requests
FOR EACH ROW
EXECUTE FUNCTION public.create_admin_notification_for_new_leave();


-- -----------------------------------------------------------------
-- 4. ROW LEVEL SECURITY (RLS)
-- -----------------------------------------------------------------

-- Enable RLS for all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leave_balances ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leave_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to ensure a clean slate
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Admins can manage all profiles." ON public.profiles;

DROP POLICY IF EXISTS "Users can view their own leave balances." ON public.leave_balances;
DROP POLICY IF EXISTS "Admins can view all leave balances." ON public.leave_balances;
DROP POLICY IF EXISTS "Admins can insert leave balances." ON public.leave_balances;
DROP POLICY IF EXISTS "Admins can update leave balances." ON public.leave_balances;

DROP POLICY IF EXISTS "Users can view their own leave requests." ON public.leave_requests;
DROP POLICY IF EXISTS "Users can insert their own leave requests." ON public.leave_requests;
DROP POLICY IF EXISTS "Admins can view all leave requests." ON public.leave_requests;
DROP POLICY IF EXISTS "Admins can update all leave requests." ON public.leave_requests;

DROP POLICY IF EXISTS "Users can view their own notifications." ON public.notifications;
DROP POLICY IF EXISTS "Users can update their own notifications." ON public.notifications;


-- RLS Policies for `profiles` table
CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Admins can manage all profiles."
  ON public.profiles FOR ALL
  USING (get_user_role() = 'admin');


-- RLS Policies for `leave_balances` table
CREATE POLICY "Users can view their own leave balances."
  ON public.leave_balances FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all leave balances."
  ON public.leave_balances FOR SELECT
  USING (get_user_role() = 'admin');
  
CREATE POLICY "Admins can insert leave balances."
  ON public.leave_balances FOR INSERT
  WITH CHECK (get_user_role() = 'admin');

CREATE POLICY "Admins can update leave balances."
  ON public.leave_balances FOR UPDATE
  USING (get_user_role() = 'admin');


-- RLS Policies for `leave_requests` table
CREATE POLICY "Users can view their own leave requests."
  ON public.leave_requests FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own leave requests."
  ON public.leave_requests FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admins can view all leave requests."
  ON public.leave_requests FOR SELECT
  USING (get_user_role() = 'admin');

CREATE POLICY "Admins can update all leave requests."
  ON public.leave_requests FOR UPDATE
  USING (get_user_role() = 'admin');


-- RLS Policies for `notifications` table
CREATE POLICY "Users can view their own notifications."
  ON public.notifications FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own notifications."
  ON public.notifications FOR UPDATE
  USING (auth.uid() = user_id);

-- =================================================================
-- END OF SCHEMA
-- =================================================================
